#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :mkdirp t :tangle ./.emacs.d/init.el 

Emacs configuration.

* table of contents                                                     :toc:
:PROPERTIES:
:TOC: :include all :ignore this
:END:
- [[#early-init-file][Early init file]]
- [[#preamble][Preamble]]
- [[#startup-performance][Startup Performance]]
- [[#machine-specific-code-and-package-initialisation][Machine specific code, and package initialisation]]
- [[#dashboard][Dashboard]]
- [[#general-configuration][General configuration]]
  - [[#initial-settings][Initial settings]]
  - [[#eliminate-c-z-sleep-in-graphical-mode][Eliminate C-z sleep in graphical mode]]
  - [[#other-settings-for-appearance-and-layout][Other settings for appearance and layout]]
- [[#package-management][Package Management]]
- [[#keep-emacsd-clean][Keep .emacs.d Clean]]
- [[#doom-modeline][Doom modeline]]
- [[#tramp][Tramp]]
- [[#completion-frameworks][Completion Frameworks]]
- [[#ivy][Ivy]]
- [[#swiper][Swiper]]
- [[#which-key][Which-key]]
- [[#ispell][ispell]]
- [[#ledger][Ledger]]
- [[#treesitter][Treesitter]]
- [[#lsp-mode][LSP mode]]
- [[#go][Go]]
- [[#python][Python]]
- [[#sql][SQL]]
- [[#c][C++]]
- [[#rust][Rust]]
- [[#yasnippet][yasnippet]]
- [[#multiple-cursors][Multiple Cursors]]
- [[#org-mode][Org-mode]]
- [[#org-bullet-mode][Org Bullet mode]]
- [[#org-roam][Org-roam]]
- [[#auctex][Auctex]]
- [[#reftex][Reftex]]
- [[#hydra][Hydra]]
- [[#javascript-and-html][Javascript and HTML]]
- [[#company-mode][Company mode]]
- [[#magit][Magit]]
- [[#flycheck][Flycheck]]
- [[#all-the-icons][All the icons]]
- [[#themes][Themes]]
- [[#projectile][Projectile]]
- [[#diminish][Diminish]]
- [[#paredit][Paredit]]
- [[#rainbow-delimiters][Rainbow Delimiters]]
- [[#clojure][Clojure]]
- [[#lisp][Lisp]]
- [[#emacs-lisp][emacs-lisp]]
- [[#haskell][Haskell]]
- [[#lua][lua]]
- [[#markdown][Markdown]]
- [[#typescript-ja-and-jsxtsx-support][Typescript, JA and JSX/TSX support]]
- [[#yaml-mode][yaml mode]]
- [[#nix][nix]]
- [[#email---notmuch][email - notmuch]]
- [[#gnus][GNUS]]
- [[#org-caldav][org-caldav]]
- [[#helpful][Helpful]]
- [[#gnupg---key-management][gnupg - Key management]]
- [[#erc][ERC]]
- [[#toc-org][toc-org]]
- [[#ox-hugo][ox-hugo]]
- [[#auto-tangle-configuration-files][Auto-tangle Configuration files]]

* Early init file
Currently, it seems that having an early-init.el file is no longer
necessary, since the only use I had for it is to ensure that the
configuration worked for emacs versions before and after 27. I leave
this here, but no longer tangle it, so the file can be removed from ~/.emacs.d/

#+begin_src emacs-lisp :mkdirp t :tangle no ./.emacs.d/early-init.el
;;; -*-buffer-read-only: t;-*- 
;;; package ---  early-init.el: Prevent package-initialize being called before loading the init file
;;; Commentary:
;;; This file is tangled from ~/dotfiles/emacs.org. Any changes should be made there...

;;; Code:

#+end_src
* Preamble
- Make the tangled file read only if loaded into emacs. Hopefully it
  will be enough to ensure this file remains the primary truth!
#+begin_src emacs-lisp
;;-*- buffer-read-only: t; lexical-binding: t; -*-

;;; init.el --- Startup file for emacs

;;; Commentary:
;; Initial configuration file loaded by Emacs.
;;  - Sets the custom configuration file location
;; This file is generated from ~/dotfiles/emacs.org and tangled. Changes should
;; be made to that file; also for more information - see details there.
;;
;; (c) 2017 - 2024 Paul Jewell
;; Contributions from many sources, including:
;; - David Wilson
;; - bbatsov
;;
;; Licence: BSD

;;; Code:
#+end_src

* Startup Performance

#+begin_src emacs-lisp

;;---------------------------------------------------------------------------------
;; Source: https://github.com/gopar/.emacs.d
;; Interesting, well configured setup, so borrowing some items from there.

;; recommended to have this at the top.

(setq treesit-extra-load-path `(,(concat user-emacs-directory "var/tree-sitter-dist/")
                                ,(concat user-emacs-directory "treesitter")))

(setq load-prefer-newer t) ;; Loads the newest version of a file .el or .elc
;;---------------------------------------------------------------------------------

;; The default is 800 kb. Measured in bytes, so this is 50Mb.
;; Memory on my machines > 8Gb, so no issue.
(setq gc-cons-threshold (* 50 1000 1000))

;; profile emacs startup

(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

#+end_src

* Machine specific code, and package initialisation
The following settings are configured depending on which machine and
which operating system is running:
- Whether or not to enable mu4e.
  It doesn't play well on windows
- Whether or not to load the gentoo-site-file
  Clearly only appropriate on gentoo systems. Since I use use-package
  to load modules, the content of this file is quite limited.
- enable auctex I had issues while working with this, again on windows
  and they need resolving. TODO: Part of the refactoring activity I am
  working on will resolve the issues and enable it to be loaded in all
  systems.
- Set the fontsize
  With different resolution monitors, I wanted to be able to set this
  at the system level.
#+begin_src emacs-lisp
;; Load machine local definitions

;; Variables requiring system level configuration
(defvar *pj/enable-mu4e-mode* t     "Enable mu4e mode.")
(defvar *pj/load-site-gentoo* nil   "Load gentoo's config file.")
(defvar *pj/enable-auctex*    t     "Enable auctex mode.")
(defvar *pj/font-size*        "14"  "Fontsize for this system.")

(defvar *pj/info-default-directory-list* "~/Nextcloud/git/org-mode/doc")

(defvar *pj/org-agenda-files* '("~/Nextcloud/org") "Location of org agenda files.")
(defvar *pj/org-roam-directory*   "~/Nextcloud/org/roam/" "Location of org-roam files.")
(defvar *pj/org-roam-db-location* "~/Nextcloud/org/org-roam.db" "Location of org-roam database.")


(defun pj/is-windows-p ()
  "True if run in windows environment."
  (string= "windows-nt" system-type))

(defun pj/is-linux-p ()
  "True if run in linux environment."
  (string= "gnu/linux" system-type))

(defun pj/is-host-p (name)
  "True if running on system NAME."
  (string= (system-name) name))

;; Three possibilities for specifying values:

;; - Globally, for all systems
;; - By operating system
;; - By system name

(cond
 ((pj/is-linux-p)
  (cond
   ((string-prefix-p "DESKTOP" (system-name)) ;; Windows WSL2 on Tristan
    (progn
      (require 'gnutls)
      ;; TODO: Check whether this is still a requirement on WSL2. It may have been necessary
      ;; with the Debian installation in place when WSL was first installed. Also, if
      ;; the latest version of Emacs is loaded, this should not be a problem.
      (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
      (defvar *pj/org-agenda-files* '("/mnt/c/Users/paul/Nextcloud/org"))
      (defvar *pj/org-roam-directory*   "/mnt/c/Users/paul/Nextcloud/org/roam/")
      (defvar *pj/org-roam-db-location* "/mnt/c/Users/paul/Nextcloud/org/org-roam.db")
      (setq *pj/font-size* "12")))
   ;; tristan now has a 4K screen, so need to pull out the settings
    ((string-prefix-p "tristan" (system-name))
     (progn
       (setq *pj/load-site-gentoo* t)
       (setq *pj/font-size* "14")))
    ((string-prefix-p "gandalf" (system-name))
     (progn
       (setq *pj/enable-mu4e-mode* nil)
       (setq *pj/font-size* "14")))
    ((string-prefix-p "isolde" (system-name))
     (progn
       (setq *pj/enable-mu4e-mode* nil)
       (setq *pj/font-size* "14")))
    (t (progn
         (setq *pj/enable-mu4e-mode* nil)
         (setq *pj/load-site-gentoo* t)))))
 ((pj/is-windows-p) ;; Not WSL2 installation - that is declared as linux
   (progn
     (setq *pj/enable-mu4e-mode* nil)
     (setq *pj/enable-auctex* nil)
     (defvar *pj/org-agenda-files* '("~/Nextcloud/org"))
     (defvar *pj/org-roam-directory*   "~/Nextcloud/org/roam/")
     :(defvar *pj/org-roam-db-location* "~/Nextcloud/org/org-roam.db")
     (setq *pj/font-size* "10")))
  (t
   (error "Undefined system-type %s" system-type)))

 (defvar *packages-initialised* nil)

 (defun initialise-packages ()
   "Ensure `package-initialize' is called only once."
   (unless *packages-initialised*
     (package-initialize)
     (setq *packages-initialised* t)))

(initialise-packages)

#+end_src

#+begin_src emacs-lisp
(defvar init-dir) ;; Initial directory for emacs configuration
(setq init-dir (file-name-directory (or load-file-name (buffer-file-name))))

#+end_src

* Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-items '((recents . 20) (bookmarks . 20)))
  (setq recentf-exclude '("bookmarks")))

#+end_src
* General configuration
** Initial settings
#+begin_src emacs-lisp
;;==============================================================================
;;.....General configuration
;;     ---------------------

(if *pj/load-site-gentoo*
    (require 'site-gentoo))

;; Set default modes
(setq major-mode 'text-mode)
(add-hook 'text-mode-hook 'turn-on-auto-fill)

;; Go straight to scratch buffer on startup
(setq inhibit-startup-screen t)

;; dont use tabs for indenting
(setq-default indent-tabs-mode nil)
(setq-default tab-width 3)
(setq-default sh-basic-offset 2)
(setq-default sh-indentation 2)

;; Changes all yes/no questions to y/n type
(fset 'yes-or-no-p 'y-or-n-p)
(set-variable 'confirm-kill-emacs 'yes-or-no-p)

#+end_src

** Eliminate C-z sleep in graphical mode
When running emacs in a terminal, it is useful to be able to suspend with C-z
but in graphical mode it causes havoc. This code checks the mode and enables/disables
C-z as appropriate.

#+begin_src emacs-lisp
(fset 'original-suspend-frame (symbol-function 'suspend-frame))

(defun my-suspend-frame ()
  "A custom version of suspend frame that does nothing in graphical mode."
  (if (display-graphic-p)
      (message "Frame suspension is disabled in graphical mode.")
    (original-suspend-frame)))

(advice-add 'suspend-frame :override #'my-suspend-frame)

#+end_src

** Other settings for appearance and layout

#+begin_src emacs-lisp


;; global-font-lock-mode enables font-lock-mode (syntax highlighting)
;; when the current major mode supports it.
(global-font-lock-mode t)
;; Goto line number. You can display the line numbers in the margin
;; of the buffer with M-x display-line-numbers-mode
(global-set-key "\C-x\C-l" 'goto-line)
;; Copy the marked region to the kill ring
(global-set-key "\C-x\C-y" 'copy-region-as-kill)

;; Remove the tool-bar from the top
(tool-bar-mode -1)
;; Currently not disabled - it is good to see the menu options available for the
;; different modes. I may disable it in the future if I feel I know the available
;; options well enough.
;; (menu-bar-mode -1) 
(scroll-bar-mode -1)

;; Full path in title bar
(setq-default frame-title-format "%b (%f)")

;; Easier to remember list-buffers...
(defalias 'list-buffers 'ibuffer)

;; Backup management
(setq backup-directory-alist `(("." . ,(concat user-emacs-directory "backups")))
      ;; don't kill my hardlinks
      backup-by-copying t
      ;; Keep multiple versions for each file, but not too many
      version-control t
      delete-old-versions t
      kept-new-versions 20
      kept-old-versions 5)

#+end_src

* Package Management
Packages are currently installed using use-package. 

#+begin_src emacs-lisp
;;==============================================================================
;;.....Package management
;;     ------------------

;; Add marmalade to package repos
(setq package-archives `(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")))
      
(initialise-packages)

(unless (and (file-exists-p (concat init-dir "elpa/archives/gnu"))
             (file-exists-p (concat init-dir "elpa/archives/melpa"))
             (file-exists-p (concat init-dir "elpa/archives/melpa-stable")))
  (package-refresh-contents))

;; Initialise use-package on non-guix/non-nix systems.
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)

;; This ensures packages are available - if using nix/guix declarative package
;; installation, this needs to be removed
(setq use-package-always-ensure t)

#+end_src

* Keep .emacs.d Clean
#+begin_src emacs-lisp
;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))

;; Use no-littering to automatically set common paths to the new user-emacs-directory
(use-package no-littering)

;; Keep customization settings in a temporary file (thanks Ambrevar!)
;; This means customisations won't persist after a reboot...
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
        (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)

#+end_src
* Doom modeline
Better UI for modeline.
Need to install fonts first by doing this:
#+begin_example
M-x all-the-icons-install-fonts
#+end_example

#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :config (column-number-mode 1)
  :custom
  (doom-modeline-height 30)
  (doom-modeline-window-width-limit nil)
  (doom-modeline-buffer-file-name-style 'truncate-with-project)
  (doom-modeline-minor-modes nil)
  (doom-modeline-enable-word-count t)
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-buffer-modification-icon t)
  (doom-modeline-env-python-executable "python")
  ;; Requires display-time-mode to be 1
  (doom-modeline-time t)
  (doom-modeline-vcs-max-length 50))

#+end_src



* Tramp
ssh connection to other machines.
#+begin_src emacs-lisp
(setq tramp-default-method "ssh")
;; Ensure paths are correct for editing files on guix systems (thanks @janneke)
(with-eval-after-load 'tramp-sh (push 'tramp-own-remote-path tramp-remote-path))
#+end_src

* Completion Frameworks
#+begin_src emacs-lisp

(use-package vertico
  :init
  (vertico-mode +1))

(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (stules partial-completion)))))

                                        ; Persist history over Emacs restarts. Vertico sorts by history position
(use-package savehist
  :init
  (savehist-mode))

(use-package marginalia
  :after vertico
  :init
  (marginalia-mode))

(use-package consult
  :bind
  (("M-y" . 'consult-yank-from-kill-ring)
   ("C-x b" . 'consult-buffer)
   ("C-s" . 'consult-line)))

(recentf-mode)
(setq completion-ignore-case t)
(setq read-file-name-completion-ignore-case t)

(use-package corfu
  :init
  (global-corfu-mode)
  :custom
  (corfu-auto t)
  ;; You may want to play with delay/prefix/styles to suit your preferences.
  (corfu-auto-delay 0)
  (corfu-auto-prefix 0)
  (completion-styles '(basic)))
  (corfu-echo-documentation 0.25) ; Enable documentation for completions
  :config
  (setq tab-always-indent 'complete)
  (add-hook 'eshell-mode-hook
            (lambda () (setq-local corfu-quit-at-boundary t
                                   corfu-quit-no-match t
                                   corfu-auto nil)
              (corfu-mode))))

(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  
  :init
  
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)
  
  :config
  
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))


#+end_src

* Ivy
Completion Framework - currently disabled in favour of vertico etc
above. I will remove this after a few weeks with vertico et al. if it
works out OK.
#+begin_src emacs-lisp :tangle no
;;==============================================================================
;;.....Ivy
;;     ---

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-wrap t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)

  (push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist)
  (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
  (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)

  (setf (alist-get 'swiper ivy-height-alist) 15)
  (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7))

(use-package ivy-hydra
  :defer t
  :after hydra)

(use-package ivy-rich
  :init
  (ivy-rich-mode 1)
  :config
  (setcdr  (assq t ivy-format-functions-alist) #'ivy-format-function-line)
  (setq ivy-rich-display-transformers-list
        (plist-put ivy-rich-display-transformers-list
                   'ivy-switch-buffer
                   '(:columns
                     ((ivy-rich-candidate (:width 40))
                      (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
                      (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
                      (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
                      (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
                     :predicate
                     (lambda (cand)
                       (if-let ((buffer (get-buffer cand)))
                           ;; Don't mess with EXWM buffers
                           (with-current-buffer buffer
                             (not (derived-mode-p 'exwm-mode)))))))))

#+end_src

* Swiper
Also currently disabled in favour of vertico et al.
#+begin_src emacs-lisp :tangle no
  ;;==============================================================================
  ;;.....Swiper
  ;;     ------

  ;; Counsel - completion package working with ivy.
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

  ;; TODO: Configure counsel-bbdb to work eith email, or configure a different
  ;;       package to manage contacts (synced with cardDAV)
  (use-package counsel-bbdb
    :ensure t)

  (use-package swiper
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))

#+end_src

* Which-key
Show the key sequences available from the current command key after a
small delay.
#+begin_src emacs-lisp
;;==============================================================================
;;.....which-key
;;     ---------
;; Key completion - offers the keys which complete the sequence.

(use-package which-key
  :config (which-key-mode))

#+end_src

* ispell
#+begin_src emacs-lisp
;;==============================================================================
;;.....ispell
;;     ------
;; Spell checker.

(require 'ispell)
(setenv "LANG" "en_GB")
(setq ispell-program-name "hunspell")
(if (string= system-type "windows-nt")
    (setq ispell-hunspell-dict-paths-alist
          '(("en_GB" "c:/Hunspell/en_GB.aff"))))
(setq ispell-local-dictionary "en_GB")
(setq ispell-local-dictionary-alist
      '(("en_GB" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_GB") nil utf-8)))
;; (flyspell-mode 1)
(global-set-key (kbd "M-\\") 'ispell-word)

#+end_src

* Ledger
CLI accounting, as it should be.
#+begin_src emacs-lisp
;;==============================================================================
;;.....ledger
;;     ------
;; Text based accounting program.

(use-package ledger-mode
  :init
  (setq ledger-clear-whole-transactions 1)
  (setq ledger-post-amount-alignment-at :decimal)
  (setq ledger-post-amount-alignment-column 60)
  
  :config
  (add-to-list 'auto-mode-alist '("\\.dat$" . ledger-mode))
  (add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode)))

#+end_src

* Treesitter
Still learning about this, so this is quite fluid. Honestly, I wish
this worked like it does in neovim, or rather, I wish I knew how to
configure it accordingly!
#+begin_src emacs-lisp
;;==============================================================================
;;.....treesitter
;;     ----------
;;; Code:
(use-package treesit-auto
  :commands
  (treesit-install-language-grammar pj/treesit-install-all-languages)
  :init
  (defvar treesit-language-source-alist
      '((bash .("https://github.com/tree-sitter/tree-sitter-bash"))
        (c . ("https://github.com/tree-sitter/tree-sitter-c"))
        (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
        (cmake . ("https://github.com/uyha/tree-sitter-cmake"))
        (css . ("https://github.com/tree-sitter/tree-sitter-css"))
        (dockerfile . ("https://github.com/camdencheek/tree-sitter-dockerfile"))
        (go . ("https://github.com/tree-sitter/tree-sitter-go"))
        (java . ("https://github.com/tree-sitter/tree-sitter-java"))
        (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
        (json . ("https://github.com/tree-sitter/tree-sitter-json"))
        (julia .("https://github.com/tree-sitter/tree-sitter-julia"))
        (nix . ("https://github.com/nix-community/tree-sitter-nix"))
        (python . ("https://github.com/tree-sitter/tree-sitter-python"))
        (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
        (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
        (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
        (typescript .("https://github.com/tree-sitter/tree-sitter-typescript"
                      "master"
                      "typescript/src"))
        (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))))

  (setq treesit-load-name-override-list '((c++ "libtree-sitter-cpp")))

  (add-to-list 'major-mode-remap-alist '(sh-mode . bash-ts-mode))
  (add-to-list 'major-mode-remap-alist '(shell-script-mode . bash-ts-mode))
  (add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
  (add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))
  (add-to-list 'major-mode-remap-alist '(c-or-c++-mode . c-or-c++-ts-mode))
  (add-to-list 'major-mode-remap-alist '(css-mode . css-ts-mode))
  (add-to-list 'major-mode-remap-alist '(java-mode . java-ts-mode))
  (add-to-list 'major-mode-remap-alist '(javascript-mode . js-ts-mode))
  (add-to-list 'major-mode-remap-alist '(js-mode . js-ts-mode))
  (add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode))
  (add-to-list 'major-mode-remap-alist '(ruby-mode . ruby-ts-mode))

  (add-to-list 'auto-mode-alist '("CMakeLists\\.txt\\'" . cmake-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.cmake\\'" . cmake-ts-mode))
  (add-to-list 'auto-mode-alist '("\\Dockerfile\\'" . dockerfile-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.go\\'" . go-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.json\\'" . json-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.toml\\'" . toml-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.\\(e?ya?\\|ra\\)ml\\'" . yaml-ts-mode))

  :custom
  (treesit-auto-install 'prompt)
  :config
  (defun pj/treesit-install-all-languages ()
    "Install all languages specified by `treeesit-language-source-alist'."
    (interactive)
    (let ((languages (mapcar 'car treesit-language-source-alist)))
      (dolist (lang languages)
        (unless (treesit-language-available-p lang)
          (treesit-install-language-grammar lang)
          (message "`%s' parser was installed." lang)
          (sit-for 0.75))))))


#+end_src
* LSP mode
As above... lsp-mode is currently setup for rust below. TODO: Generic
lsp-mode setup for the languages I use.
#+begin_src emacs-lisp

;; Adds LSP support. Note that you must have the respective LSP
;; server installed on your machine to use it with Eglot. e.g.
;; rust-analyzer to use Eglot with `rust-mode'.
(use-package eglot
  :ensure t
  :bind (("s-<mouse-1>" . eglot-find-implementation)
         ("C-c ." . eglot-code-action-quickfix))
  ;; Add your programming modes here to automatically start Eglot,
  ;; assuming you have the respective LSP server installed.
  :hook ((web-mode . eglot-ensure)
         (rust-mode . eglot-ensure))
  :config
  ;; You can configure additional LSP servers by modifying
  ;; `eglot-server-programs'. The following tells eglot to use TypeScript
  ;; language server when working in `web-mode'.
  (add-to-list 'eglot-server-programs
               '(web-mode . ("typescript-language-server" "--stdio"))))
#+end_src
* Go
Not currently using go, so not sure if this is complete or not.
#+begin_src emacs-lisp
  ;;==============================================================================
  ;;.....go
  ;;     --
  ;; Package for go programming.

  (use-package go-mode
     :config
     (add-hook 'go-mode-hook (lambda () (setq auto-complete-mode 1))))

#+end_src

* Python

TODO: Not working, and not used currently...
#+begin_src emacs-lisp
;;==============================================================================
;;.....Python
;;     ------


;;; Currently commented out - jedi mode should not be installed when using
;;; company mode. company-jedi should be used instead

;;(use-package jedi
;;  
;;  :init
;;  (add-hook 'python-mode-hook 'jedi:setup)
;;  (add-hook 'python-mode-hook 'jedi:ac-setup))
;;; Alternative - use elpy - not yet fully configured
;;(use-package elpy
;;  
;;  :init
;;  (advice-add 'python-mode :before 'elpy-enable))

#+end_src

* SQL
Set up when I was doing stuff with mysql. Currently dormant...
#+begin_src emacs-lisp
;;==============================================================================
;;.....SQL
;;     ---

(require 'sql)

(eval-after-load "sql"
  '(progn (sql-set-product 'mysql)))

#+end_src

* C++
I haven't used this in anger recently, so I am not sure if it
works. TODO: Needs to be revisited.
#+begin_src emacs-lisp
;;==============================================================================
;;.....c++
;;     ---

(defun my-c++-mode-hook()
  "Customise the default c++ settings."
  (c-set-style "stroustrup"))

(add-hook 'c++-mode-hook 'my-c++-mode-hook)

;;==============================================================================
;;.....smex
;;     ----
;; M-x enhancement - show most recently used commands which match as typing.

;; (use-package smex
;; 
;; :bind (("M-x" . smex)
;;        ("M-X" . smex-major-mode-commands)
;;        ("C-c C-c M-x" . 'execute-extended-command)) ;; Original M-x command
;; :config (smex-initialize))

(defadvice ido-set-matches-1 (around ido-smex-acronym-matches activate)
  "Filters ITEMS by setting acronynms first."
  (if (and (fboundp 'smex-already-running) (smex-already-running) (> (length ido-text) 1))
      
      ;; We use a hash table for the matches, <type> => <list of items>, where
      ;; <type> can be one of (e.g. `ido-text' is "ff"):
      ;; - strict: strict acronym match (i.e. "^f[^-]*-f[^-]*$");
      ;; - relaxed: for relaxed match (i.e. "^f[^-]*-f[^-]*");
      ;; - start: the text start with (i.e. "^ff.*");
      ;; - contains: the text contains (i.e. ".*ff.*");
      (let ((regex (concat "^" (mapconcat 'char-to-string ido-text "[^-]*-")))
            (matches (make-hash-table :test 'eq)))

        ;; Filtering
        (dolist (item items)
          (let ((key))
            (cond
             ;; strict match
             ((string-match (concat regex "[^-]*$") item)
              (setq key 'strict))

             ;; relaxed match
             ((string-match regex item)
              (setq key 'relaxed))

             ;; text that start with ido-text
             ((string-match (concat "^" ido-text) item)
              (setq key 'start))

             ;; text that contains ido-text
             ((string-match ido-text item)
              (setq key 'contains)))

            (when key
              ;; We have a winner! Update its list.
              (let ((list (gethash key matches ())))
                (puthash key (push item list) matches)))))

        ;; Finally, we can order and return the results
        (setq ad-return-value (append (gethash 'strict matches)
                                      (gethash 'relaxed matches)
                                      (gethash 'start matches)
                                      (gethash 'contains matches))))

    ;; ...else, run the original ido-set-matches-1
    ad-do-it))

;; Delayed loading - initialisation when used for the first time
;; (global-set-key [(meta x)]
;;   (lambda ()
;;     (interactive)
;;     (or (boundp 'smex-cache)
;;         (smex-initialize))
;;     (global-set-key [(meta x)] 'smex) (smex)))

;; (global-set-key [(shift meta x)]
;;   (lambda () (interactive)
;;   (or (boundp 'smex-cache) (smex-initialize))
;;   (global-set-key [(shift meta x)] 'smex-major-mode-commands)
;;   (smex-major-mode-commands)))

#+end_src


* Rust
Started learning rust. This config snippet is copied from elsewhere,
but seems to work at the moment. TODO: Improve further.

#+begin_src emacs-lisp
(use-package rust-mode
  :ensure t
  :bind (:map rust-mode-map
	      ("C-c C-r" . 'rust-run)
	      ("C-c C-c" . 'rust-compile)
	      ("C-c C-f" . 'rust-format-buffer)
	      ("C-c C-t" . 'rust-test))
  :hook (rust-mode . prettify-symbols-mode))
#+end_src


This version is currently disabled - the above should do it for emacs29++
#+begin_src emacs-lisp :tangle :no
;;==============================================================================
;;.....rust
;;     ----
;; Package for rust programming.

;; (use-package rustic)

;; (defun rustic-mode-auto-save-hook ()
;;   "Enable auto-saving in rustic-mode buffers."
;;   (when buffer-file-name
;;     (setq-local compilation-ask-about-save nil)))
;; (add-hook 'rustic-mode-hook 'rustic-mode-auto-save-hook)

(use-package rustic
  :ensure
  :mode ("\\.rs\\'" . rustic-mode)
  ;; :bind (:map rustic-mode-map
  ;;             ("M-j" . lsp-ui-imenu)
  ;;             ("M-?" . lsp-find-references)
  ;;             ("C-c C-c l" . flycheck-list-errors)
  ;;             ("C-c C-c a" . lsp-execute-code-action)
  ;;             ("C-c C-c r" . lsp-rename)
  ;;             ("C-c C-c q" . lsp-workspace-restart)
  ;;             ("C-c C-c Q" . lsp-workspace-shutdown)
  ;;             ("C-c C-c s" . lsp-rust-analyzer-status)
  ;;             ("C-c C-c e" . lsp-rust-analyzer-expand-macro)
  ;;             ("C-c C-c d" . dap-hydra)
  ;;             ("C-c C-c h" . lsp-ui-doc-glance))
  :config
  ;; uncomment for less flashiness
  ;; (setq lsp-eldoc-hook nil)
  ;; (setq lsp-enable-symbol-highlighting nil)
  ;; (setq lsp-signature-auto-activate nil)

  ;; comment to disable rustfmt on save
  (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

(defun rk/rustic-mode-hook ()
  ;; so that run C-c C-c C-r works without having to confirm, but don't try to
  ;; save rust buffers that are not file visiting. Once
  ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
  ;; no longer be necessary.
  (when buffer-file-name
    (setq-local buffer-save-without-query t))
  (add-hook 'before-save-hook 'lsp-format-buffer nil t))

;; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
;; for rust-analyzer integration

(use-package lsp-mode
  :ensure
  :commands lsp
  :custom
  ;; what to use when checking on-save. "check" is default, I prefer clippy
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-eldoc-render-all t)
  (lsp-idle-delay 0.6)
  ;; This controls the overlays that display type and other hints inline. Enable
  ;; / disable as you prefer. Well require a `lsp-workspace-restart' to have an
  ;; effect on open projects.
  (lsp-rust-analyzer-server-display-inlay-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  (lsp-rust-analyzer-display-chaining-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  (lsp-rust-analyzer-display-closure-return-type-hints t)
  (lsp-rust-analyzer-display-parameter-hints nil)
  (lsp-rust-analyzer-display-reborrow-hints nil)
  :config
  (add-hook 'lsp-mode-hook 'lsp-ui-mode))

(use-package lsp-ui
  :ensure
  :commands lsp-ui-mode
  :custom
  (lsp-ui-peek-always-show t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-doc-enable nil))


#+end_src

#+results:

* yasnippet
Snippet management. TODO: Proper setup
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure
  :bind
  (:map yas-minor-mode-map
        ("C-c y" . yas-expand)
        ([(tab)] . nil)
        ("TAB" . nil))
  :config
  (yas-reload-all)
  (add-hook 'prog-mode-hook #'yas-minor-mode)
  (add-hook 'text-mode-hook #'yas-minor-mode))
#+end_src

#+results:

* Multiple Cursors
#+begin_src emacs-lisp
;;==============================================================================
;;.....multiple cursors
;;     ----------------

(use-package multiple-cursors
  :config (global-set-key (kbd "C-c m c") 'mc/edit-lines))

#+end_src

* Org-mode
TODO: Move this all into the my-org-mode.el file, and load it here.
TODO: Refactor my-org-mode.el file completely.
#+begin_src emacs-lisp
  ;;==============================================================================
  ;;.....org mode
  ;;     --------

  (setq org-agenda-files *pj/org-agenda-files*)
  (load "~/.emacs.d/lisp/my-org-mode.el")

;;  (eval-after-load "org" (add-to-list 'org-modules 'org-habit))
;;  (require 'org-habit) ;; org-habit is part of org-mode (not a package)
  (global-set-key (kbd "C-c w") 'org-refile)


;; Resolving conflict between org-mode and yasnippet
;; (defun yas/org-very-safe-expand ()
;;   (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

;; (add-hook 'org-mode-hook
;;           (lambda ()
;;             (make-variable-buffer-local 'yas/trigger-key)
;;             (setq yas/trigger-key [tab])
;;             (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
;;             (define-key yas/keymap [tab] 'yas/next-field)))

#+end_src

* Org Bullet mode
Pretty bullets
#+begin_src emacs-lisp
;;==============================================================================
;;.....org bullet mode
;;     ---------------

(use-package org-bullets
  :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

#+end_src
* Org-roam
Note taking on steroids. Need to learn how to use it properly.
#+begin_src emacs-lisp
;;==============================================================================
;;.....org roam mode
;;     -------------

;; Installation advice from the org-roam documentation website:
;; https://org-roam.readthedocs.io/en/master/installation/
;; and also the System Crafters videos on org-roam (from v2 onwards).

(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t) ;; Silence version 2 update message  
  :custom
  (org-roam-db-location *pj/org-roam-db-location*)
  (org-roam-directory *pj/org-roam-directory*)
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
      :unnarrowed t)
     ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project\n#+date: %U")
      :unnarrowed t)))
;;  (org-roam-dailies-capture-templates
;;   '(("d" "default" entry "* %<%I:%M %p>: %?"
;;      :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>an"))))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n j" . org-roam-dailies-capture-today)
         ("C-c n g" . org-roam-graph)
         ("C-c n c" . org-roam-capture)
         :map org-mode-map
         ("C-M-i"   . completion-at-point)
         :map org-roam-dailies-map
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies) ;; ensure the keymap is available
  (org-roam-db-autosync-mode))


#+end_src

* Auctex
TODO: Check the function of this. I want to write my book, and this
will be usefull for managing references.
#+begin_src emacs-lisp
;;==============================================================================
;;.....auctex
;;     ------

(when *pj/enable-auctex*
  (use-package auctex
    :mode ("\\.tex\\'" . latex-mode)
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    
    (add-hook 'LaTeX-mode-hook 
              (lambda ()
                (company-mode)
                (visual-line-mode) ; May prefer auto-fill-mode
                (flyspell-mode)
                (turn-on-reftex)
                (setq TeX-PDF-mode t)
                (setq reftex-plug-into-AUCtex t)
                (LaTeX-math-mode)))
    
    ;; Update PDF buffers after successful LaTaX runs
    (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
              #'TeX-revert-document-buffer)
    
    ;; to use pdfview with auctex
    (add-hook 'Latex-mode-hook 'pdf-tools-install)))


#+end_src
* Reftex
I haven't used this yet, so there may be some issues.
TODO: Sort this out!
#+begin_src emacs-lisp
;;==============================================================================
;;.....reftex
;;     ------

;;(use-package reftex
;;  :defer t
;;  :config
;;  (setq reftex-cite-prompt-optional-args t)) ; prompt for empty optional args in cite


;;==============================================================================
;;.....ivy-bibtex
;;     ----------

;; TODO: Modify the paths etc in this section:

;;(use-package ivy-bibtex
;;  
;;  :bind ("C-c b b" . ivy-bibtex)
;;  :config
;;  (setq bibtex-completion-bibliography 
;;        '("C:/Users/Nasser/OneDrive/Bibliography/references-zot.bib"))
;;  (setq bibtex-completion-library-path 
;;        '("C:/Users/Nasser/OneDrive/Bibliography/references-pdf"
;;          "C:/Users/Nasser/OneDrive/Bibliography/references-etc"))
;;
;;  ;; using bibtex path reference to pdf file
;;  (setq bibtex-completion-pdf-field "File")
;;
;;  ;;open pdf with external viwer foxit
;;  (setq bibtex-completion-pdf-open-function
;;        (lambda (fpath)
;;          (call-process "C:\\Program Files (x86)\\Foxit Software\\Foxit Reader\\FoxitReader.exe" nil 0 nil fpath)))
;;
;;  (setq ivy-bibtex-default-action 'bibtex-completion-insert-citation))


#+end_src
* Hydra
Useful key programming. 
#+begin_src emacs-lisp
;;==============================================================================
;;.....hydra
;;     -----

(use-package hydra 
  :init 
  (global-set-key
   (kbd "C-x t")
	(defhydra toggle (:color blue)
	  "toggle"
	  ("a" abbrev-mode "abbrev")
	  ("s" flyspell-mode "flyspell")
	  ("d" toggle-debug-on-error "debug")
     ;;	      ("c" fci-mode "fCi")
	  ("f" auto-fill-mode "fill")
	  ("t" toggle-truncate-lines "truncate")
	  ("w" whitespace-mode "whitespace")
	  ("q" nil "cancel"))))

(global-set-key
 (kbd "C-x j")
 (defhydra gotoline 
   (:pre (display-line-numbers-mode t)
	      :post (display-line-numbers-mode nil))
   "goto"
   ("t" (move-to-window-line-top-bottom 0) "top")
   ("b" (move-to-window-line-top-bottom -2) "bottom")
   ("m" (move-to-window-line-top-bottom) "middle")
   ("e" (goto-char (point-max)) "end")
   ("c" recenter-top-bottom "recenter")
   ("n" next-line "down")
   ("p" (lambda () (interactive) (forward-line -1))  "up")
   ("g" goto-line "goto-line")))

;; font zoom mode example taken from hydra wiki
(defhydra hydra-zoom (global-map "<f2>")
  "zoom"
  ("+" text-scale-increase "in")
  ("-" text-scale-decrease "out")
  ("0" (text-scale-adjust 0) "reset")
  ("q" nil "quit" :color blue))

#+end_src
* Javascript and HTML
TODO: Setup javascript mode
Disabling js2 mode. I don't program in javascript at the moment, and I
want to get other stuff working first.
#+begin_src emacs-lisp :tangle no
;;==============================================================================
;;.....javascript / HTML
;;     -----------------

;; (use-package js2-mode
;;   :config
;;   (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
;;   (add-hook 'js2-mode-hook #'js2-imenu-extras-mode))

;; (use-package js2-refactor
  
;;   :config
;;   (add-hook 'js2-mode-hook #'js2-refactor-mode)
;;   ;; (js2-add-keybindings-with-prefix "C-c C-r") ;; Clash with ivy-resume
;;   (define-key js2-mode-map (kbd "C-k") #'js2r-kill)
;;   ;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
;;   ;; unbind it.
;;   (define-key js-mode-map (kbd "M-.") nil))
  
;; (add-hook 'js2-mode-hook (lambda ()
;;                            (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))

;; (use-package xref-js2)

#+end_src
* Company mode
Text completion framework.
#+begin_src emacs-lisp
;;==============================================================================
;;.....company mode
;;     ------------

(use-package company
  :config
;;  (setq company-idle-delay 0)
;;  (setq company-minimum-prefix-length 3)
  (global-company-mode 1)
  :bind
  (:map company-active-map
        ("C-n" . company-select-next)
        ("C-p" . company-select-previous)
        ("C-<" . company-select-first)
        ("C->" . company-select-last))

  (:map company-mode-map
        ("M-<tab>" . tab-indent-or-complete)
        ("M-TAB" . tab-indent-or-complete)))

(defun company-yasnippet-or-completion ()
  (interactive)
  (or (do-yas-expand)
      (company-complete-common)))

(defun check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
      (backward-char 1)
      (if (looking-at "\\.") t
        (backward-char 1)
        (if (looking-at "::") t nil)))))

(defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
    (yas/expand)))

(defun tab-indent-or-complete ()
  (interactive)
  (if (minibufferp)
      (minibuffer-complete)
    (if (or (not yas-minor-mode)
            (null (do-yas-expand)))
        (if (check-expansion)
            (company-complete-common)
          (indent-for-tab-command)))))

;; Move to python configuration block
;; (use-package company-jedi
;;   :config
;;   (add-hook 'python-mode-hook 'jedi:setup))

;; (defun my/python-mode-hook ()
;;   "Python mode hook."
;;   (add-to-list 'company-backends 'company-jedi))

;; (add-hook 'python-mode-hook 'my/python-mode-hook)

#+end_src

* Magit
git processing - the best.
#+begin_src emacs-lisp
;;==============================================================================
;;.....magit
;;     -----

(use-package magit
  :init
  (progn
    (bind-key "C-c g" 'magit-status)
    ))

(use-package git-gutter
  
  :init
  (global-git-gutter-mode +1))

(global-set-key (kbd "M-g M-g") 'hydra-git-gutter/body)


(use-package git-timemachine)

(defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                                      :hint nil)
  "
Git gutter:
  _j_: next hunk        _s_tage hunk     _q_uit
  _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
  ^ ^                   _p_opup hunk
  _h_: first hunk
  _l_: last hunk        set start _R_evision
"
  ("j" git-gutter:next-hunk)
  ("k" git-gutter:previous-hunk)
  ("h" (progn (goto-char (point-min))
              (git-gutter:next-hunk 1)))
  ("l" (progn (goto-char (point-min))
              (git-gutter:previous-hunk 1)))
  ("s" git-gutter:stage-hunk)
  ("r" git-gutter:revert-hunk)
  ("p" git-gutter:popup-hunk)
  ("R" git-gutter:set-start-revision)
  ("q" nil :color blue)
  ("Q" (progn (git-gutter-mode -1)
              ;; git-gutter-fringe doesn't seem to
              ;; clear the markup right away
              (sit-for 0.1)
              (git-gutter:clear))
   :color blue))

#+end_src

* Flycheck
Not sure how this interfaces with lsp
#+begin_src emacs-lisp
;;==============================================================================
;;.....flycheck
;;     --------

(use-package flycheck
  :init
  (global-flycheck-mode 1))

#+end_src

* All the icons
#+begin_src emacs-lisp
;;==============================================================================
;;.....all the icons
;;     -------------


;; If this configuration is being used on a new installation,
;; remember to run M-x all-the-icons-install-fonts
;; otherwise nothing will work
(use-package all-the-icons
  :config
  (use-package all-the-icons-dired
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)))


#+end_src

* Themes
#+begin_src emacs-lisp
;;==============================================================================
;;.....themes
;;     ------

(use-package doom-themes
  :config
  (doom-themes-org-config)
  (doom-themes-visual-bell-config)
  (load-theme 'doom-tokyo-night t))

;; (use-package gruvbox-theme
;;   :config
;;   (load-theme 'gruvbox t))

;; Font size is localised in site-local.el
(defvar my:font (concat "Iosevka-" *pj/font-size* ":spacing=110"))

;; Font size setting for Emacs 27:
(set-face-attribute 'default nil :font my:font )
;; (set-frame-font my:font nil t)

;; Set font for frames running under emacs daemon
(add-to-list 'default-frame-alist `(font . ,(concat "Iosevka-" *pj/font-size*)))
#+end_src

* Projectile
Management at a project level, rather than just at file level.
#+begin_src emacs-lisp
;;==============================================================================
;;.....Projectile
;;     ----------

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom (setq projectile-completion-system 'ivy)
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~projects")
    (setq projectile-project-search-path '("~/projects")))
  (setq projectile-switch-project-action #'projectile-dired))
#+end_src

* Diminish
Hide minor mode information from the mode line.
#+begin_src emacs-lisp

(use-package diminish
  :demand t)

#+end_src

* Paredit
Beautiful editing in lisp modes! Never have a problem with unbalanced
parentheses. Would be good if it worked with other languages...
TODO: Find out if it does!
#+begin_src emacs-lisp
;;==============================================================================
;;.....Paredit
;;     -------

(use-package paredit
  :diminish paredit-mode
  :config
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  :bind (("C-c d" . paredit-forward-down))) 

;; Ensure paredit is used EVERYWHERE!
(use-package paredit-everywhere
  :ensure t
  :diminish paredit-everywhere-mode
  :config
  (add-hook 'lisp-mode-hook #'paredit-everywhere-mode))

#+end_src

* Rainbow Delimiters
Colour those delimiters, for easier comprehension.
#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  :config
  (add-hook 'lisp-mode-hook
            (lambda()
              (rainbow-delimiters-mode))))

;;(global-highlight-parentheses-mode)

#+end_src

* Clojure
My first experience of a functional language. Nice setup with cider,
but I have since moved on to common lisp. I still like the functional
rigour of clojure though!
#+begin_src emacs-lisp
;;==============================================================================
;;.....Clojure
;;     -------

(add-hook 'clojure-mode-hook 'enable-paredit-mode)
(add-hook 'clojure-mode-hook 'lsp)
(add-hook 'clojurescript-mode-hook 'lsp)
(add-hook 'clojurec-mode-hook 'lsp)

(use-package cider
  :config
  (add-hook 'cider-repl-mode-hook #'company-mode)
  (add-hook 'cider-mode-hook #'company-mode)
  (add-hook 'cider-mode-hook #'eldoc-mode)
  (add-hook 'cider-mode-hook #'cider-hydra-mode)
  (add-hook 'clojure-mode-hook #'paredit-mode)
  (setq cider-repl-use-pretty-printing t)
  (setq cider-repl-display-help-banner nil)
  (setq cider-default-cljs-repl "(do (use 'figwheel-sidecar.repl-api) (start-figwheel!) (cljs-repl))")

  :bind (("M-r" . cider-namespace-refresh)
         ("C-c r" . cider-repl-reset)
         ("C-c ." . cider-reset-test-run-tests)))


(use-package cider-hydra)

#+end_src

* Lisp

Investigating the correct way to setup slime, swank, lisp and
quicklisp leads to the following:
- Option 1: Install slime from quicklisp, and not from emacs elpa
  (etc), and execute the slime-helper.el script provided by quicklisp.
- Option 2: Install slime/swank from elpa, then:
  - Configure ~/.config/common-lisp/source-registry.conf.d/swank.conf
    with the following contents:
    (:tree "//home/paul//.emacs.d/elpa/")
    This will make quicklisp search for swank in the installed
    directory in the emacs.d tree.
    
#+begin_src emacs-lisp
;;==============================================================================
;;.....lisp - slime
;;     ------------

;; shamelessly copied from 
;; https://github.com/ajukraine/ajukraine-dotemacs/blob/master/aj/rc-modes/init.el
;; 17/11/2018

(use-package slime
  :commands slime
  :init
  ;; Not needed...
  ;; (load (expand-file-name "~/.emacs.d/lisp/new-slime-helper.el"))
  :config
  (progn
    (add-hook
     'slime-load-hook
     #'(lambda ()
         (slime-setup
          '(slime-fancy
            slime-repl
            slime-fuzzy))))
    (setq slime-net-coding-system 'utf-8-unix)
    (setq inferior-lisp-program "sbcl")
    (setq slime-lisp-implementations '((sbcl ("sbcl"))))
    
    (use-package ac-slime
      :init
      (progn
        (add-hook 'slime-mode-hook 'set-up-slime-ac)
        (add-hook 'slime-repl-mode-hook 'set-up-slime-ac))
      :config
      (progn
        (eval-after-load "auto-complete"
          '(add-to-list 'ac-modes 'slime-repl-mode))))))

#+end_src

* emacs-lisp
#+begin_src emacs-lisp
;;==============================================================================
;;.....elisp - slime
;;     -------------

(use-package elisp-slime-nav
  :config
  (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
    (add-hook hook #'elisp-slime-nav-mode)))

#+end_src

* Haskell
Like this language as well, but it is still a big learning curve for
me. Since I use xmonad/xmobar, I have more opportunity to learn
haskell going forward. Also, learning rust means playing with monads
without using the name!!
#+begin_src emacs-lisp
;;==============================================================================
;;.....haskell
;;     -------

(use-package haskell-mode
  :config
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode))
#+end_src



* lua
#+begin_src emacs-lisp
(use-package lua-mode)

#+end_src
* Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  ;; These extra modes help clean up the Markdown editing experience.
  ;; `visual-line-mode' turns on word wrap and helps editing commands
  ;; work with paragraphs of text. `flyspell-mode' turns on an
  ;; automatic spell checker.
  :hook ((markdown-mode . visual-line-mode)
         (markdown-mode . flyspell-mode))
  :init
  (setq markdown-command "multimarkdown"))

#+end_src
* Typescript, JA and JSX/TSX support
#+begin_src emacs-lisp
;;==============================================================================
;;.....TypeScript, JS, and JSX/TSX support.
;;     ------------------------------------

(use-package web-mode
  :ensure t
  :mode (("\\.ts\\'" . web-mode)
         ("\\.js\\'" . web-mode)
         ("\\.mjs\\'" . web-mode)
         ("\\.tsx\\'" . web-mode)
         ("\\.jsx\\'" . web-mode))
  :custom
  (web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
  (web-mode-code-indent-offset 2)
  (web-mode-css-indent-offset 2)
  (web-mode-markup-indent-offset 2)
  (web-mode-enable-auto-quoting nil))
#+end_src
* yaml mode
#+begin_src emacs-lisp
;;==============================================================================
;;.....yaml mode
;;     =========

(use-package yaml-mode)

#+end_src
* nix
Nix, beautiful Nix. I tried guix, but found it challenging, but NixOS
is wonderful.
#+begin_src emacs-lisp
;;==============================================================================
;;.....nix
;;     ===

(use-package nix-mode)

#+end_src
* email - notmuch
TODO: Persevere with notmuch - get good at sending emails, and sort out the tagging to improve
the experience.
#+begin_src scheme :noweb-ref packages: :noweb-sep "\n"
(require 'notmuch)

#+end_src

* GNUS
Watch John Wiegley using gnus - very impressive, so I want to explore further.
#+begin_src emacs-lisp
;; Not yet configured

#+end_src
* org-caldav
TODO: Still under development. First time I tried this, I wiped my
calendars. Need to experiment with an empty calendar to prove it
works, then take it from there. Website here:
https://github.com/dengste/org-caldav

#+begin_src emacs-lisp

(use-package org-caldav
  
  :config
  (setq org-caldav-url "https://nextcloud.applied-jidoka.com/remote.php/dav/calendars/paul")
  (setq org-caldav-calendars
        '(,(:calendar-id "caldav-org-test"
                         :files (concat (file-name-as-directory *pj/org-directory*) "caldav-org-test.org")
                         :inbox "~/Calendars/caldav-org-inbox.org")))
  (setq org-caldav-backup-file "~/org-caldav-backup.org")
  (setq org-caldav-save-directory "~/org-caldav/")
  (setq org-icalendar-timezone "Europe/London"))

#+end_src

* Helpful
#+begin_src emacs-lisp
;;==============================================================================
;;.....helpful - improve the help documentation
;;     -------

(use-package helpful
  :ensure t
  :bind (("C-h f" . #'helpful-callable)
         ("C-h v" . #'helpful-variable)
         ("C-h k" . #'helpful-key)
         ("C-c C-d" . #'helpful-at-point)
         ("C-h F" . #'helpful-function)
         ("C-h C" . #'helpful-command)))
#+end_src

* gnupg - Key management
#+begin_src emacs-lisp
;; Following the ELPA instructions didn't work as expected - came across
;; this approach, which does work. See also changes in gpg-agent.conf
(setq epa-pinentry-mode 'loopback)
#+end_src
 
* ERC
Developed from bbatsov's code on his github.
#+begin_src emacs-lisp
;;==============================================================================
;;.....ERC
;;     ---
;; thank you bbatsov - for sharing your code for ERC config.

(require 'erc)
(require 'erc-log)
(require 'erc-notify)
(require 'erc-spelling)
(require 'erc-autoaway)


;; (setq erc-autojoin-channels-alist '(("freenode.net"
;;                                     "#emacs"
;;                                     "#gentoo" "#guile"
;;                                     "#lisp" "#clojure" "#scheme"))

(setq erc-autojoin-channels-alist '(("libera.chat"
                                     "#emacs"
                                     "#gentoo"
                                     "#gentoo-haskell"
                                     "#guile"
                                     "#lisp"
                                     "#clojure"
                                     "#haskell"
                                     "#debian"
                                     "#scheme")))

;; Interpret mIRC-style colour commands in IRC chats
(setq erc-interpret-mirc-color t)

;; Kill buffers for channels after /part
(setq erc-kill-buffer-on-part t)
;; kill buffers for private queries after quiting the server
(setq erc-kill-queries-on-quit t)
;; Kill buffers for server messages after quitting the server
(setq erc-kill-server-buffer-on-quit t)
;; open query buffers in the current window
(setq erc-query-display 'buffer)

;; exclude boring stuff from tracking
(erc-track-mode t)
(setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                "324" "329" "332" "333" "353" "477"))

;; logging
(setq erc-log-channels-directory "~/.erc/logs/")

(if (not (file-exists-p erc-log-channels-directory))
    (mkdir erc-log-channels-directory t))

(setq erc-save-buffer-on-part t)
;; (defadvice save-buffers-kill-emacs (before save-logs (arg) activate)
;;   (save-some-buffers t (lambda () (when (eq major-mode 'erc-mode) t))))

;; truncate long irc buffers
(erc-truncate-mode +1)

;; share my real name
(setq erc-user-full-name "Paul Jewell")

;; enable spell checking
(erc-spelling-mode 1)

;; set different dictionaries by different servers/channels
;;(setq erc-spelling-dictionaries '(("#emacs" "american")))
(defun clean-message (s)
  "Clean up message S for notification function."
  (let* ((s (replace-regexp-in-string ">" "&gt;" s))
         (s (replace-regexp-in-string "<" "&lt;" s))
         (s (replace-regexp-in-string "&" "&amp;" s))
         (s (replace-regexp-in-string "\"" "&quot;" s))))
  (replace-regexp-in-string "'" "&apos;" s))

;; TODO - replace this with use of notify.el
;; Notify my when someone mentions my nick.
(defun call-libnotify (matched-type nick msg)
  "Notify when NICK is mentioned in MSG (MATCHED-TYPE)."
  (let* ((cmsg  (split-string (clean-message msg)))
         (nick   (first (split-string nick "!")))
         (msg    (mapconcat 'identity (rest cmsg) " ")))
    (shell-command-to-string
     (format "notify-send -t 5000 -u normal '%s says:' '%s'" nick msg))))

(add-hook 'erc-text-matched-hook 'call-libnotify)

(defvar erc-notify-nick-alist nil
  "Alist of nicks and the last time they tried to trigger a
notification.")

(defvar erc-notify-timeout 10
  "Number of seconds that must elapse between notifications from
the same person.")

(defun erc-notify-allowed-p (nick &optional delay)
  "Return non-nil if a notification should be made for NICK.
If DELAY is specified, it will be the minimum time in seconds
that can occur between two notifications.  The default is
`erc-notify-timeout'."
  (unless delay (setq delay erc-notify-timeout))
  (let ((cur-time (time-to-seconds (current-time)))
        (cur-assoc (assoc nick erc-notify-nick-alist))
        (last-time nil))
    (if cur-assoc
        (progn
          (setq last-time (cdr cur-assoc))
          (setcdr cur-assoc cur-time)
          (> (abs (- cur-time last-time)) delay))
      (push (cons nick cur-time) erc-notify-nick-alist)
      t)))

;; private message notification
(defun erc-notify-on-private-msg (proc parsed)
  "Notify when private message is received (PROC PARSED)."
  (let ((nick (car (erc-parse-user (erc-response.sender parsed))))
        (target (car (erc-response.command-args parsed)))
        (msg (erc-response.contents parsed)))
    (when (and (erc-current-nick-p target)
               (not (erc-is-message-ctcp-and-not-action-p msg))
               (erc-notify-allowed-p nick))
      (shell-command-to-string
       (format "notify-send -t 5000 -u normal '%s says:' '%s'" nick msg))
      nil)))

(add-hook 'erc-server-PRIVMSG-functions 'erc-notify-on-private-msg)

;; autoaway setup
(setq erc-auto-discard-away t)
(setq erc-autoaway-idle-seconds 600)
(setq erc-autoaway-idle-method 'emacs)

;; auto identify
;; (when (file-exists-p (expand-file-name "~/.ercpass"))
;;   (load "~/.ercpass")
;;   (require 'erc-services)
;;   (erc-services-mode 1)
;;   (setq erc-prompt-for-password nil))
  ;; (setq erc-nickserv-passwords
  ;;       `((freenode (("paulj" . ,paulj-pass))))))

;; utf-8 always and forever
(setq erc-server-coding-system '(utf-8 . utf-8))

(defun start-irc ()
  "Connect to IRC."
  (interactive)
  (when (y-or-n-p "Do you want to start IRC? ")
    (erc :server "irc.libera.chat" :port 6667 :nick "paul_j")))

(defun filter-server-buffers ()
  (delq nil
        (mapcar
         (lambda (x) (and (erc-server-buffer-p x) x))
         (buffer-list))))

(defun stop-irc ()
  "Disconnects from all irc servers."
  (interactive)
  (dolist (buffer (filter-server-buffers))
    (message "Server buffer: %s" (buffer-name buffer))
    (with-current-buffer buffer
      (erc-quit-server "Asta la vista"))))


#+end_src

* toc-org
Make table of contents when saving org-files.

#+begin_src emacs-lisp
;;==============================================================================
;;.....toc-org
;;     -------

(use-package toc-org
  :config
  (add-hook 'org-mode-hook 'toc-org-mode)

  ;; enable in markdown as well
  (add-hook 'markdown-mode-hook 'toc-org-mode))

#+end_src

* ox-hugo
TODO: Not yet set up. Website development with org and hugo.

#+begin_src emacs-lisp
;;==============================================================================
;;.....Ox-Hugo
;;     -------

(use-package ox-hugo
  :after ox)

(put 'narrow-to-region 'disabled nil)

(provide 'init)
;;; init.el ends here

#+end_src

* Auto-tangle Configuration files
#+begin_src emacs-lisp
  ;;==============================================================================
  ;;.....Auto tangle configuration files
  ;;     -------------------------------

  (defun pj/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name "~/dotfiles/"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))


  (add-hook 'org-mode-hook 
            (lambda () 
              (add-hook 'after-save-hook
                        #'pj/org-babel-tangle-config)))
#+end_src
